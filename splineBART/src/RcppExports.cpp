// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

// adapt_theta_adapt_tau
Rcpp::List adapt_theta_adapt_tau(Rcpp::List Y_train, Rcpp::List Phi_train, arma::mat Z_train, arma::mat Z_test, Rcpp::List cutpoints, double alpha, double beta, arma::mat K, double log_det_K, size_t rank_K, double nu_tau, double lambda_tau, double nu_sigma, double lambda_sigma, double a, double b, size_t N_u, double rho_eta, size_t M, size_t nd, size_t burn, bool verbose, size_t print_every, bool debug);
RcppExport SEXP _splineBART_adapt_theta_adapt_tau(SEXP Y_trainSEXP, SEXP Phi_trainSEXP, SEXP Z_trainSEXP, SEXP Z_testSEXP, SEXP cutpointsSEXP, SEXP alphaSEXP, SEXP betaSEXP, SEXP KSEXP, SEXP log_det_KSEXP, SEXP rank_KSEXP, SEXP nu_tauSEXP, SEXP lambda_tauSEXP, SEXP nu_sigmaSEXP, SEXP lambda_sigmaSEXP, SEXP aSEXP, SEXP bSEXP, SEXP N_uSEXP, SEXP rho_etaSEXP, SEXP MSEXP, SEXP ndSEXP, SEXP burnSEXP, SEXP verboseSEXP, SEXP print_everySEXP, SEXP debugSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::List >::type Y_train(Y_trainSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type Phi_train(Phi_trainSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type Z_train(Z_trainSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type Z_test(Z_testSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type cutpoints(cutpointsSEXP);
    Rcpp::traits::input_parameter< double >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< double >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type K(KSEXP);
    Rcpp::traits::input_parameter< double >::type log_det_K(log_det_KSEXP);
    Rcpp::traits::input_parameter< size_t >::type rank_K(rank_KSEXP);
    Rcpp::traits::input_parameter< double >::type nu_tau(nu_tauSEXP);
    Rcpp::traits::input_parameter< double >::type lambda_tau(lambda_tauSEXP);
    Rcpp::traits::input_parameter< double >::type nu_sigma(nu_sigmaSEXP);
    Rcpp::traits::input_parameter< double >::type lambda_sigma(lambda_sigmaSEXP);
    Rcpp::traits::input_parameter< double >::type a(aSEXP);
    Rcpp::traits::input_parameter< double >::type b(bSEXP);
    Rcpp::traits::input_parameter< size_t >::type N_u(N_uSEXP);
    Rcpp::traits::input_parameter< double >::type rho_eta(rho_etaSEXP);
    Rcpp::traits::input_parameter< size_t >::type M(MSEXP);
    Rcpp::traits::input_parameter< size_t >::type nd(ndSEXP);
    Rcpp::traits::input_parameter< size_t >::type burn(burnSEXP);
    Rcpp::traits::input_parameter< bool >::type verbose(verboseSEXP);
    Rcpp::traits::input_parameter< size_t >::type print_every(print_everySEXP);
    Rcpp::traits::input_parameter< bool >::type debug(debugSEXP);
    rcpp_result_gen = Rcpp::wrap(adapt_theta_adapt_tau(Y_train, Phi_train, Z_train, Z_test, cutpoints, alpha, beta, K, log_det_K, rank_K, nu_tau, lambda_tau, nu_sigma, lambda_sigma, a, b, N_u, rho_eta, M, nd, burn, verbose, print_every, debug));
    return rcpp_result_gen;
END_RCPP
}
// adapt_theta_fixed_tau
Rcpp::List adapt_theta_fixed_tau(Rcpp::List Y_train, Rcpp::List Phi_train, arma::mat Z_train, arma::mat Z_test, Rcpp::List cutpoints, double alpha, double beta, arma::mat K, double log_det_K, size_t rank_K, double tau, double nu_sigma, double lambda_sigma, double a, double b, size_t N_u, double rho_eta, size_t M, size_t nd, size_t burn, bool verbose, size_t print_every, bool debug);
RcppExport SEXP _splineBART_adapt_theta_fixed_tau(SEXP Y_trainSEXP, SEXP Phi_trainSEXP, SEXP Z_trainSEXP, SEXP Z_testSEXP, SEXP cutpointsSEXP, SEXP alphaSEXP, SEXP betaSEXP, SEXP KSEXP, SEXP log_det_KSEXP, SEXP rank_KSEXP, SEXP tauSEXP, SEXP nu_sigmaSEXP, SEXP lambda_sigmaSEXP, SEXP aSEXP, SEXP bSEXP, SEXP N_uSEXP, SEXP rho_etaSEXP, SEXP MSEXP, SEXP ndSEXP, SEXP burnSEXP, SEXP verboseSEXP, SEXP print_everySEXP, SEXP debugSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::List >::type Y_train(Y_trainSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type Phi_train(Phi_trainSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type Z_train(Z_trainSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type Z_test(Z_testSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type cutpoints(cutpointsSEXP);
    Rcpp::traits::input_parameter< double >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< double >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type K(KSEXP);
    Rcpp::traits::input_parameter< double >::type log_det_K(log_det_KSEXP);
    Rcpp::traits::input_parameter< size_t >::type rank_K(rank_KSEXP);
    Rcpp::traits::input_parameter< double >::type tau(tauSEXP);
    Rcpp::traits::input_parameter< double >::type nu_sigma(nu_sigmaSEXP);
    Rcpp::traits::input_parameter< double >::type lambda_sigma(lambda_sigmaSEXP);
    Rcpp::traits::input_parameter< double >::type a(aSEXP);
    Rcpp::traits::input_parameter< double >::type b(bSEXP);
    Rcpp::traits::input_parameter< size_t >::type N_u(N_uSEXP);
    Rcpp::traits::input_parameter< double >::type rho_eta(rho_etaSEXP);
    Rcpp::traits::input_parameter< size_t >::type M(MSEXP);
    Rcpp::traits::input_parameter< size_t >::type nd(ndSEXP);
    Rcpp::traits::input_parameter< size_t >::type burn(burnSEXP);
    Rcpp::traits::input_parameter< bool >::type verbose(verboseSEXP);
    Rcpp::traits::input_parameter< size_t >::type print_every(print_everySEXP);
    Rcpp::traits::input_parameter< bool >::type debug(debugSEXP);
    rcpp_result_gen = Rcpp::wrap(adapt_theta_fixed_tau(Y_train, Phi_train, Z_train, Z_test, cutpoints, alpha, beta, K, log_det_K, rank_K, tau, nu_sigma, lambda_sigma, a, b, N_u, rho_eta, M, nd, burn, verbose, print_every, debug));
    return rcpp_result_gen;
END_RCPP
}
// fixed_theta_adapt_tau
Rcpp::List fixed_theta_adapt_tau(Rcpp::List Y_train, Rcpp::List Phi_train, arma::mat Z_train, arma::mat Z_test, Rcpp::List cutpoints, double alpha, double beta, arma::mat K, double log_det_K, size_t rank_K, double nu_tau, double lambda_tau, double nu_sigma, double lambda_sigma, size_t M, size_t nd, size_t burn, bool verbose, size_t print_every, bool debug);
RcppExport SEXP _splineBART_fixed_theta_adapt_tau(SEXP Y_trainSEXP, SEXP Phi_trainSEXP, SEXP Z_trainSEXP, SEXP Z_testSEXP, SEXP cutpointsSEXP, SEXP alphaSEXP, SEXP betaSEXP, SEXP KSEXP, SEXP log_det_KSEXP, SEXP rank_KSEXP, SEXP nu_tauSEXP, SEXP lambda_tauSEXP, SEXP nu_sigmaSEXP, SEXP lambda_sigmaSEXP, SEXP MSEXP, SEXP ndSEXP, SEXP burnSEXP, SEXP verboseSEXP, SEXP print_everySEXP, SEXP debugSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::List >::type Y_train(Y_trainSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type Phi_train(Phi_trainSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type Z_train(Z_trainSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type Z_test(Z_testSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type cutpoints(cutpointsSEXP);
    Rcpp::traits::input_parameter< double >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< double >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type K(KSEXP);
    Rcpp::traits::input_parameter< double >::type log_det_K(log_det_KSEXP);
    Rcpp::traits::input_parameter< size_t >::type rank_K(rank_KSEXP);
    Rcpp::traits::input_parameter< double >::type nu_tau(nu_tauSEXP);
    Rcpp::traits::input_parameter< double >::type lambda_tau(lambda_tauSEXP);
    Rcpp::traits::input_parameter< double >::type nu_sigma(nu_sigmaSEXP);
    Rcpp::traits::input_parameter< double >::type lambda_sigma(lambda_sigmaSEXP);
    Rcpp::traits::input_parameter< size_t >::type M(MSEXP);
    Rcpp::traits::input_parameter< size_t >::type nd(ndSEXP);
    Rcpp::traits::input_parameter< size_t >::type burn(burnSEXP);
    Rcpp::traits::input_parameter< bool >::type verbose(verboseSEXP);
    Rcpp::traits::input_parameter< size_t >::type print_every(print_everySEXP);
    Rcpp::traits::input_parameter< bool >::type debug(debugSEXP);
    rcpp_result_gen = Rcpp::wrap(fixed_theta_adapt_tau(Y_train, Phi_train, Z_train, Z_test, cutpoints, alpha, beta, K, log_det_K, rank_K, nu_tau, lambda_tau, nu_sigma, lambda_sigma, M, nd, burn, verbose, print_every, debug));
    return rcpp_result_gen;
END_RCPP
}
// fixed_theta_fixed_tau
Rcpp::List fixed_theta_fixed_tau(Rcpp::List Y_train, Rcpp::List Phi_train, arma::mat Z_train, arma::mat Z_test, Rcpp::List cutpoints, double alpha, double beta, arma::mat K, double log_det_K, size_t rank_K, double tau, double nu_sigma, double lambda_sigma, size_t M, size_t nd, size_t burn, bool verbose, size_t print_every, bool debug);
RcppExport SEXP _splineBART_fixed_theta_fixed_tau(SEXP Y_trainSEXP, SEXP Phi_trainSEXP, SEXP Z_trainSEXP, SEXP Z_testSEXP, SEXP cutpointsSEXP, SEXP alphaSEXP, SEXP betaSEXP, SEXP KSEXP, SEXP log_det_KSEXP, SEXP rank_KSEXP, SEXP tauSEXP, SEXP nu_sigmaSEXP, SEXP lambda_sigmaSEXP, SEXP MSEXP, SEXP ndSEXP, SEXP burnSEXP, SEXP verboseSEXP, SEXP print_everySEXP, SEXP debugSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::List >::type Y_train(Y_trainSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type Phi_train(Phi_trainSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type Z_train(Z_trainSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type Z_test(Z_testSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type cutpoints(cutpointsSEXP);
    Rcpp::traits::input_parameter< double >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< double >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type K(KSEXP);
    Rcpp::traits::input_parameter< double >::type log_det_K(log_det_KSEXP);
    Rcpp::traits::input_parameter< size_t >::type rank_K(rank_KSEXP);
    Rcpp::traits::input_parameter< double >::type tau(tauSEXP);
    Rcpp::traits::input_parameter< double >::type nu_sigma(nu_sigmaSEXP);
    Rcpp::traits::input_parameter< double >::type lambda_sigma(lambda_sigmaSEXP);
    Rcpp::traits::input_parameter< size_t >::type M(MSEXP);
    Rcpp::traits::input_parameter< size_t >::type nd(ndSEXP);
    Rcpp::traits::input_parameter< size_t >::type burn(burnSEXP);
    Rcpp::traits::input_parameter< bool >::type verbose(verboseSEXP);
    Rcpp::traits::input_parameter< size_t >::type print_every(print_everySEXP);
    Rcpp::traits::input_parameter< bool >::type debug(debugSEXP);
    rcpp_result_gen = Rcpp::wrap(fixed_theta_fixed_tau(Y_train, Phi_train, Z_train, Z_test, cutpoints, alpha, beta, K, log_det_K, rank_K, tau, nu_sigma, lambda_sigma, M, nd, burn, verbose, print_every, debug));
    return rcpp_result_gen;
END_RCPP
}
// summarize_fit
Rcpp::List summarize_fit(Rcpp::List beta_list, Rcpp::List Phi_list, arma::vec probs, size_t n_samples, double y_mean, double y_sd);
RcppExport SEXP _splineBART_summarize_fit(SEXP beta_listSEXP, SEXP Phi_listSEXP, SEXP probsSEXP, SEXP n_samplesSEXP, SEXP y_meanSEXP, SEXP y_sdSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::List >::type beta_list(beta_listSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type Phi_list(Phi_listSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type probs(probsSEXP);
    Rcpp::traits::input_parameter< size_t >::type n_samples(n_samplesSEXP);
    Rcpp::traits::input_parameter< double >::type y_mean(y_meanSEXP);
    Rcpp::traits::input_parameter< double >::type y_sd(y_sdSEXP);
    rcpp_result_gen = Rcpp::wrap(summarize_fit(beta_list, Phi_list, probs, n_samples, y_mean, y_sd));
    return rcpp_result_gen;
END_RCPP
}
// summarize_fit_ystar
Rcpp::List summarize_fit_ystar(Rcpp::List beta_list, Rcpp::List Phi_list, Rcpp::List sigma_list, arma::vec probs, size_t n_samples, double y_mean, double y_sd);
RcppExport SEXP _splineBART_summarize_fit_ystar(SEXP beta_listSEXP, SEXP Phi_listSEXP, SEXP sigma_listSEXP, SEXP probsSEXP, SEXP n_samplesSEXP, SEXP y_meanSEXP, SEXP y_sdSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::List >::type beta_list(beta_listSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type Phi_list(Phi_listSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type sigma_list(sigma_listSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type probs(probsSEXP);
    Rcpp::traits::input_parameter< size_t >::type n_samples(n_samplesSEXP);
    Rcpp::traits::input_parameter< double >::type y_mean(y_meanSEXP);
    Rcpp::traits::input_parameter< double >::type y_sd(y_sdSEXP);
    rcpp_result_gen = Rcpp::wrap(summarize_fit_ystar(beta_list, Phi_list, sigma_list, probs, n_samples, y_mean, y_sd));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_splineBART_adapt_theta_adapt_tau", (DL_FUNC) &_splineBART_adapt_theta_adapt_tau, 24},
    {"_splineBART_adapt_theta_fixed_tau", (DL_FUNC) &_splineBART_adapt_theta_fixed_tau, 23},
    {"_splineBART_fixed_theta_adapt_tau", (DL_FUNC) &_splineBART_fixed_theta_adapt_tau, 20},
    {"_splineBART_fixed_theta_fixed_tau", (DL_FUNC) &_splineBART_fixed_theta_fixed_tau, 19},
    {"_splineBART_summarize_fit", (DL_FUNC) &_splineBART_summarize_fit, 6},
    {"_splineBART_summarize_fit_ystar", (DL_FUNC) &_splineBART_summarize_fit_ystar, 7},
    {NULL, NULL, 0}
};

RcppExport void R_init_splineBART(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
